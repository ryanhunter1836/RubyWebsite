{"ast":null,"code":"var stripe = Stripe(\"pk_test_9hjuOlOoWDXhiVKDcIRTxsOQ00WIi2YqjZ\");\nvar elements = stripe.elements();\nvar style = {\n  base: {\n    color: \"#32325d\"\n  }\n};\nvar card = elements.create(\"card\", {\n  style: style\n});\ncard.mount(\"#card-element\");\ncard.on('change', function (_ref) {\n  var error = _ref.error;\n  var displayError = document.getElementById('card-errors');\n\n  if (error) {\n    displayError.textContent = error.message;\n  } else {\n    displayError.textContent = '';\n  }\n});\nvar form = document.getElementById('payment-form');\nform.addEventListener('submit', function (ev) {\n  ev.preventDefault();\n  stripe.confirmCardPayment(clientSecret, {\n    payment_method: {\n      card: card,\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    }\n  }).then(function (result) {\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/home/ryan/Ruby/RubyWebsite/app/javascript/packs/payment_handler.js"],"names":["stripe","Stripe","elements","style","base","color","card","create","mount","on","error","displayError","document","getElementById","textContent","message","form","addEventListener","ev","preventDefault","confirmCardPayment","clientSecret","payment_method","billing_details","name","then","result","console","log","paymentIntent","status"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,MAAM,CAAC,4CAAD,CAAnB;AACA,IAAIC,QAAQ,GAAGF,MAAM,CAACE,QAAP,EAAf;AAEA,IAAIC,KAAK,GAAG;AACRC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH;AADE,CAAZ;AAME,IAAIC,IAAI,GAAGJ,QAAQ,CAACK,MAAT,CAAgB,MAAhB,EAAwB;AAAEJ,EAAAA,KAAK,EAAEA;AAAT,CAAxB,CAAX;AACAG,IAAI,CAACE,KAAL,CAAW,eAAX;AAEAF,IAAI,CAACG,EAAL,CAAQ,QAAR,EAAkB,gBAAa;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAC7B,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAArB;;AACA,MAAIH,KAAJ,EAAW;AACTC,IAAAA,YAAY,CAACG,WAAb,GAA2BJ,KAAK,CAACK,OAAjC;AACD,GAFD,MAEO;AACLJ,IAAAA,YAAY,CAACG,WAAb,GAA2B,EAA3B;AACD;AACF,CAPD;AASA,IAAIE,IAAI,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAX;AAEFG,IAAI,CAACC,gBAAL,CAAsB,QAAtB,EAAgC,UAASC,EAAT,EAAa;AAC3CA,EAAAA,EAAE,CAACC,cAAH;AACAnB,EAAAA,MAAM,CAACoB,kBAAP,CAA0BC,YAA1B,EAAwC;AACtCC,IAAAA,cAAc,EAAE;AACdhB,MAAAA,IAAI,EAAEA,IADQ;AAEdiB,MAAAA,eAAe,EAAE;AACfC,QAAAA,IAAI,EAAE;AADS;AAFH;AADsB,GAAxC,EAOGC,IAPH,CAOQ,UAASC,MAAT,EAAiB;AACvB,QAAIA,MAAM,CAAChB,KAAX,EAAkB;AAChB;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAAChB,KAAP,CAAaK,OAAzB;AACD,KAHD,MAGO;AACL;AACA,UAAIW,MAAM,CAACG,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD,CAC/C;AACA;AACA;AACA;AACA;AACD;AACF;AACF,GArBD;AAsBD,CAxBD","sourcesContent":["var stripe = Stripe(\"pk_test_9hjuOlOoWDXhiVKDcIRTxsOQ00WIi2YqjZ\");\nvar elements = stripe.elements();\n\nvar style = {\n    base: {\n      color: \"#32325d\",\n    }\n  };\n  \n  var card = elements.create(\"card\", { style: style });\n  card.mount(\"#card-element\");\n\n  card.on('change', ({error}) => {\n    const displayError = document.getElementById('card-errors');\n    if (error) {\n      displayError.textContent = error.message;\n    } else {\n      displayError.textContent = '';\n    }\n  });\n\n  var form = document.getElementById('payment-form');\n\nform.addEventListener('submit', function(ev) {\n  ev.preventDefault();\n  stripe.confirmCardPayment(clientSecret, {\n    payment_method: {\n      card: card,\n      billing_details: {\n        name: 'Jenny Rosen'\n      }\n    }\n  }).then(function(result) {\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}